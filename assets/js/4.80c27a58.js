(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{174:function(a,s,t){a.exports=t.p+"assets/img/ci-artifacts.eb5e792a.jpg"},363:function(a,s,t){"use strict";t.r(s);var n=[function(){var a=this,s=a.$createElement,n=a._self._c||s;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"使用gitlab-ci-对springboot项目进行容器化持续发布"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用gitlab-ci-对springboot项目进行容器化持续发布","aria-hidden":"true"}},[a._v("#")]),a._v(" 使用gitlab CI 对Springboot项目进行容器化持续发布")]),a._v(" "),n("h2",{attrs:{id:"创建一个springboot项目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建一个springboot项目","aria-hidden":"true"}},[a._v("#")]),a._v(" 创建一个Springboot项目")]),a._v(" "),n("p",[a._v("可以使用如下多种方式创建项目：")]),a._v(" "),n("ul",[n("li",[a._v("使用idea的Springboot插件")]),a._v(" "),n("li",[a._v("Maven")]),a._v(" "),n("li",[a._v("Springboot CLI")])]),a._v(" "),n("p",[a._v("我们只需要创建一个空项目，不需要写太多的代码。为了验证，我们给项目提供actuator的功能。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("management.endpoint.beans.enabled=true\nmanagement.endpoint.info.enabled=true\nmanagement.endpoint.health.enabled=true\nmanagement.endpoints.web.exposure.include=health,info\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("p",[a._v("项目创建完成后，启动项目测试一下：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('# curl http://localhost:8080/actuator/health\n\n{"status":"UP"}%\n\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("h2",{attrs:{id:"给项目提供gitlab-ci功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#给项目提供gitlab-ci功能","aria-hidden":"true"}},[a._v("#")]),a._v(" 给项目提供gitlab CI功能")]),a._v(" "),n("h3",{attrs:{id:"项目容器编译脚本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#项目容器编译脚本","aria-hidden":"true"}},[a._v("#")]),a._v(" 项目容器编译脚本")]),a._v(" "),n("div",{staticClass:"language-docker line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-docker"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[a._v("FROM")]),a._v(" openjdk"),n("span",{attrs:{class:"token punctuation"}},[a._v(":")]),a._v("8u111"),n("span",{attrs:{class:"token punctuation"}},[a._v("-")]),a._v("jdk"),n("span",{attrs:{class:"token punctuation"}},[a._v("-")]),a._v("alpine\n"),n("span",{attrs:{class:"token keyword"}},[a._v("VOLUME")]),a._v(" /tmp\n"),n("span",{attrs:{class:"token keyword"}},[a._v("ADD")]),a._v(" /target/springbootci"),n("span",{attrs:{class:"token punctuation"}},[a._v("-")]),a._v("0.0.1"),n("span",{attrs:{class:"token punctuation"}},[a._v("-")]),a._v("SNAPSHOT.jar app.jar\n"),n("span",{attrs:{class:"token keyword"}},[a._v("ENTRYPOINT")]),a._v(" "),n("span",{attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{attrs:{class:"token string"}},[a._v('"java"')]),n("span",{attrs:{class:"token punctuation"}},[a._v(",")]),n("span",{attrs:{class:"token string"}},[a._v('"-Djava.security.egd=file:/dev/./urandom"')]),n("span",{attrs:{class:"token punctuation"}},[a._v(",")]),n("span",{attrs:{class:"token string"}},[a._v('"-jar"')]),n("span",{attrs:{class:"token punctuation"}},[a._v(",")]),n("span",{attrs:{class:"token string"}},[a._v('"/app.jar"')]),n("span",{attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("p",[n("code",[a._v("springbootci-0.0.1-SNAPSHOT.jar")]),a._v("是项目pom文件声明的产物名称")]),a._v(" "),n("div",{staticClass:"language-xml line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[a._v("\n    "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId")]),n("span",{attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("com.freshal.example"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[a._v("</")]),a._v("groupId")]),n("span",{attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId")]),n("span",{attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("springbootci"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[a._v("</")]),a._v("artifactId")]),n("span",{attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[a._v("<")]),a._v("version")]),n("span",{attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("0.0.1-SNAPSHOT"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[a._v("</")]),a._v("version")]),n("span",{attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[a._v("<")]),a._v("name")]),n("span",{attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("springbootci"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[a._v("</")]),a._v("name")]),n("span",{attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[a._v("<")]),a._v("description")]),n("span",{attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("Demo project for Spring Boot"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[a._v("</")]),a._v("description")]),n("span",{attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br")])]),n("h3",{attrs:{id:"创建ci-pipeline-脚本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建ci-pipeline-脚本","aria-hidden":"true"}},[a._v("#")]),a._v(" 创建CI pipeline 脚本")]),a._v(" "),n("div",{staticClass:"language-yml line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('image: docker:latest\nservices:\n  - docker:dind\n\nvariables:\n  DOCKER_DRIVER: overlay\n  SPRING_PROFILES_ACTIVE: gitlab-ci\n\nstages:\n  - build\n  - package\n\nmaven-build:\n  image: maven:3-jdk-8A\n  stage: build\n  script: "mvn package -B"\n  artifacts:\n    paths:\n      - target/*.jar\n\ndocker-build:\n  stage: package\n  script:\n    - docker build -t freshal/springbootci .\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br")])]),n("h4",{attrs:{id:"image-和service"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#image-和service","aria-hidden":"true"}},[a._v("#")]),a._v(" image 和service")]),a._v(" "),n("p",[a._v("GitLab Runner可以使用容器镜像来支持流水线。image元素定义了我们要使用哪个镜像。\n有效的镜像仅限于本地容器引擎和Docker Hub存储的。\nservice元素定义了额外的要使用的链接到主容器的镜像。在我们的例子中，主要容器是一个普通容器镜像，而链接容器是一个容器中的容器（Docker in Docker）")]),a._v(" "),n("ul",[n("li",[a._v("关于dind的说明：https://docs.gitlab.com/ee/ci/docker/using_docker_build.html")])]),a._v(" "),n("h4",{attrs:{id:"variables"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#variables","aria-hidden":"true"}},[a._v("#")]),a._v(" Variables")]),a._v(" "),n("p",[a._v("变量可以定义编译环境使用的参数。\n具体参考：https://docs.gitlab.com/ee/ci/yaml/#variables")]),a._v(" "),n("p",[a._v("GITALB已经预定义了一些变量，见：http://git.manystar.com/help/ci/variables/predefined_variables.md")]),a._v(" "),n("h4",{attrs:{id:"stages"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#stages","aria-hidden":"true"}},[a._v("#")]),a._v(" Stages")]),a._v(" "),n("p",[a._v("stages元素定义了流水线的生命周期。我们给每一个stage都关联一个job。一个stage中的所有job并行运行，并按照我们定义的顺序依次触发各个stage，即，只有在上一个stage完成后才启动下一个stage。")]),a._v(" "),n("h4",{attrs:{id:"maven-build-job"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#maven-build-job","aria-hidden":"true"}},[a._v("#")]),a._v(" maven build job")]),a._v(" "),n("p",[a._v("这个job是执行maven构建，所以使用了"),n("code",[a._v("maven:3-jdk-8")]),a._v("作为执行构建的容器镜像。")]),a._v(" "),n("p",[n("code",[a._v("script")]),a._v("是一个gitlab runner要执行的shell 命令。"),n("code",[a._v("The mvn package -B")]),a._v("启动一个非交互式的maven构建过程。mvn package包括validate,compile,和test。")]),a._v(" "),n("p",[a._v("在不同的job之前持久化可执行的jar，我们声明job的产物。这些产物是每次成功构建后的输出文件，可以在gitlab流水线的界面上下载。\n"),n("img",{attrs:{src:t(174),alt:"ci-artifacts.jpg"}})]),a._v(" "),n("ul",[n("li",[a._v("maven 详细例子：https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/Maven.gitlab-ci.yml")]),a._v(" "),n("li",[a._v("gradle 详细例子：https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/Gradle.gitlab-ci.yml")])]),a._v(" "),n("h4",{attrs:{id:"容器创建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#容器创建","aria-hidden":"true"}},[a._v("#")]),a._v(" 容器创建")]),a._v(" "),n("p",[a._v("关于容器创建的详细例子参考：https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/Docker.gitlab-ci.yml")]),a._v(" "),n("h4",{attrs:{id:"缓存maven库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缓存maven库","aria-hidden":"true"}},[a._v("#")]),a._v(" 缓存maven库")]),a._v(" "),n("p",[a._v("如果每次都新建容器，下载依赖，非常影响效率，为了解决这个问题，可以使用cache。")]),a._v(" "),n("div",{staticClass:"language-yml line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('\nimage: docker:latest\nservices:\n  - docker:dind\n\nvariables:\n  DOCKER_DRIVER: overlay\n  SPRING_PROFILES_ACTIVE: gitlab-ci\n  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"\n\ncache:\n  paths:\n    - .m2/repository\n\nstages:\n  - build\n  - package\n\nmaven-build:\n  image: maven:3-jdk-8A\n  stage: build\n  script: "mvn package -B"\n  artifacts:\n    paths:\n      - target/*.jar\n\ndocker-build:\n  stage: package\n  script:\n    - docker build -t freshal/springbootci .\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br"),n("span",{staticClass:"line-number"},[a._v("27")]),n("br"),n("span",{staticClass:"line-number"},[a._v("28")]),n("br"),n("span",{staticClass:"line-number"},[a._v("29")]),n("br"),n("span",{staticClass:"line-number"},[a._v("30")]),n("br")])]),n("p",[a._v("关于cache的详细例子：\nhttps://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/Maven.gitlab-ci.yml")]),a._v(" "),n("h2",{attrs:{id:"其他总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其他总结","aria-hidden":"true"}},[a._v("#")]),a._v(" 其他总结")]),a._v(" "),n("h3",{attrs:{id:"gitlab-runner配置模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-runner配置模式","aria-hidden":"true"}},[a._v("#")]),a._v(" gitlab runner配置模式")]),a._v(" "),n("p",[a._v("gitlab runner有三种配置方式")]),a._v(" "),n("ul",[n("li",[a._v("shell执行")]),a._v(" "),n("li",[a._v("Docker in Docker")]),a._v(" "),n("li",[a._v("Docker socket bind\n这三种模式没有一种更好，更多的需要权衡。dind模式会比较慢一些，因为每一个job都在一个干净的环境中，但是这允许并发且不会冲突。另外dind和socket bind模式不能混用。")])]),a._v(" "),n("h3",{attrs:{id:"config-toml里的concurrent字段的意义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#config-toml里的concurrent字段的意义","aria-hidden":"true"}},[a._v("#")]),a._v(" config.toml里的concurrent字段的意义")]),a._v(" "),n("p",[a._v("concurrent限制了整个GitLab Runner能并发处理job的数量。特别注意concurrent与worker数量无任何关系，所有worker的工作是受GitLab Runner控制的，如果concurrent值为1并且有一个worker已经在工作了，那么即使其他worker达到了可以工作的条件也只能“pending”。")]),a._v(" "),n("p",[a._v("config.toml配置说明：\nhttps://docs.gitlab.com/runner/configuration/advanced-configuration.html")]),a._v(" "),n("h3",{attrs:{id:"cache存储在哪里"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cache存储在哪里","aria-hidden":"true"}},[a._v("#")]),a._v(" cache存储在哪里")]),a._v(" "),n("p",[a._v("https://docs.gitlab.com/ee/ci/caching/#where-the-caches-are-stored")]),a._v(" "),n("p",[a._v("这里讲了如何使用cache，以及cache的最佳实践：")]),a._v(" "),n("ul",[n("li",[a._v("Tag your Runners and use the tag on jobs that share their cache.")]),a._v(" "),n("li",[a._v("Use sticky Runners that will be only available to a particular project.")]),a._v(" "),n("li",[a._v("Use a key that fits your workflow (for example, different caches on each branch). For that, you can take advantage of the CI/CD predefined variables.")])]),a._v(" "),n("h3",{attrs:{id:"怎样清除cache"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#怎样清除cache","aria-hidden":"true"}},[a._v("#")]),a._v(" 怎样清除cache")]),a._v(" "),n("p",[a._v("注意cache是没有过期时间的，而且每一次新的push触发的pipeline，都会重新生成cache，重新生成的cache的名字为"),n("code",[a._v("<cache-key>-<num>")]),a._v("，其中num是随着push数量递增的。如果不去清除cache，cache会永久保留在Runner上，日积月累会填满存储空间的，因此最好隔一段时间进行一次清除，清除方法请参考https://docs.gitlab.com/ee/ci/caching/#clearing-the-cache，或者使用clear_volumes.sh 这个简单脚本来处理它, 清除cache的原理是将相关的volume移除，当然，docker也有自带的清除命令，推荐将docker system prune -f --volumes加入到定时任务中。")]),a._v(" "),n("h3",{attrs:{id:"mac上的docker-volume在哪"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mac上的docker-volume在哪","aria-hidden":"true"}},[a._v("#")]),a._v(" mac上的docker volume在哪")]),a._v(" "),n("p",[a._v("~/Library/Containers/com.docker.docker/Data/vms/0/")]),a._v(" "),n("p",[a._v("使用screen 命令可以连接tty进入")]),a._v(" "),n("h3",{attrs:{id:"gitlab-ci详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-ci详解","aria-hidden":"true"}},[a._v("#")]),a._v(" Gitlab CI详解")]),a._v(" "),n("ul",[n("li",[a._v("基本概念：https://docs.gitlab.com/ee/ci/introduction/")]),a._v(" "),n("li",[a._v("CI配置详解：https://docs.gitlab.com/ee/ci/yaml/")]),a._v(" "),n("li",[a._v("Gitlab容器注册：https://docs.gitlab.com/ee/user/packages/container_registry/index.html#enable-the-container-registry-for-your-project")]),a._v(" "),n("li",[a._v("与Docker容器集成：https://docs.gitlab.com/ee/ci/docker/using_docker_build.html")]),a._v(" "),n("li",[a._v("pipeline详解：https://docs.gitlab.com/ee/ci/pipelines/index.html")]),a._v(" "),n("li",[a._v("gitlab runner配置详细说明:https://docs.gitlab.com/runner/configuration/")])]),a._v(" "),n("h3",{attrs:{id:"maven的settings-xml"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#maven的settings-xml","aria-hidden":"true"}},[a._v("#")]),a._v(" maven的settings.xml")]),a._v(" "),n("p",[a._v("修改config.toml，加入volumes")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('volumes = ["/Users/marszhang/.m2/settings.xml:/mvn/.m2/settings.xml","/var/run/docker.sock:/var/run/docker.sock","/cache"]\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])]),n("p",[a._v("修改.gitlab-ci.yml，加入before_script段")]),a._v(" "),n("div",{staticClass:"language-yml line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('maven-build:\n  image: maven:3-jdk-8\n  stage: build\n  before_script:\n    - cp -f /mvn/.m2/settings.xml  $HOME/.m2/settings.xml\n  script:\n    - "mvn package -B"\n  after_script:\n    - rm -f $HOME/.m2/settings.xml\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br")])])])}],e=t(0),r=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},n,!1,null,null,null);r.options.__file="springboot-gitlab-ci.md";s.default=r.exports}}]);