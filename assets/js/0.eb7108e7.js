(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{163:function(t,e,s){t.exports=s.p+"assets/img/s11.571b3bf8.png"},164:function(t,e,s){t.exports=s.p+"assets/img/s10.8e5a709e.png"},165:function(t,e,s){t.exports=s.p+"assets/img/s9.8422a5c7.png"},166:function(t,e,s){t.exports=s.p+"assets/img/s8.dc484d37.png"},167:function(t,e,s){t.exports=s.p+"assets/img/s7.41baa59e.png"},168:function(t,e,s){t.exports=s.p+"assets/img/s6.bd59a0eb.png"},169:function(t,e,s){t.exports=s.p+"assets/img/s5.188ad3c0.png"},170:function(t,e,s){t.exports=s.p+"assets/img/s4.7d4bd179.png"},171:function(t,e,s){t.exports=s.p+"assets/img/s3.5f987bb2.png"},172:function(t,e,s){t.exports=s.p+"assets/img/s2.e9df3f2b.png"},173:function(t,e,s){t.exports=s.p+"assets/img/s1.dd9da4f5.png"},359:function(t,e,s){"use strict";s.r(e);var n=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"java-writeto-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-writeto-file","aria-hidden":"true"}},[t._v("#")]),t._v(" Java WriteTo File")]),t._v(" "),n("h2",{attrs:{id:"write-double-to-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#write-double-to-file","aria-hidden":"true"}},[t._v("#")]),t._v(" Write Double To File")]),t._v(" "),n("h3",{attrs:{id:"source-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#source-code","aria-hidden":"true"}},[t._v("#")]),t._v(" source code")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" java"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DataOutputStream"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" java"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FileOutputStream"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" java"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IOException"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),n("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("WriteDoubleToFile")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n \n  "),n("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   \n    String strFilePath "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"C://FileIO//WriteDouble.txt"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   \n    "),n("span",{attrs:{class:"token keyword"}},[t._v("try")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token comment"}},[t._v("//create FileOutputStream object")]),t._v("\n      FileOutputStream fos "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("FileOutputStream")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strFilePath"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     \n      "),n("span",{attrs:{class:"token comment"}},[t._v("/*\n       * To create DataOutputStream object from FileOutputStream use,\n       * DataOutputStream(OutputStream os) constructor.\n       *\n       */")]),t._v("\n      \n       DataOutputStream dos "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("DataOutputStream")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fos"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      \n       "),n("span",{attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("75000")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      \n       "),n("span",{attrs:{class:"token comment"}},[t._v("/*\n        * To write a double value to a file, use\n        * void writeDouble(double d) method of Java DataOutputStream class.\n        *\n        * This method writes specified double to output stream as 8 bytes value.\n        * Please note that the double value is first converted to long using\n        * Double.doubleToLongBits method and then long is written to\n        * underlying output stream.\n        */")]),t._v("\n       \n        dos"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("writeDouble")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       \n        "),n("span",{attrs:{class:"token comment"}},[t._v("/*\n         * To close DataOutputStream use,\n         * void close() method.\n         *\n         */")]),t._v("\n        \n         dos"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("close")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" e"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      System"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("println")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"IOException : "')]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" e"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br"),n("span",{staticClass:"line-number"},[t._v("44")]),n("br"),n("span",{staticClass:"line-number"},[t._v("45")]),n("br"),n("span",{staticClass:"line-number"},[t._v("46")]),n("br"),n("span",{staticClass:"line-number"},[t._v("47")]),n("br"),n("span",{staticClass:"line-number"},[t._v("48")]),n("br"),n("span",{staticClass:"line-number"},[t._v("49")]),n("br"),n("span",{staticClass:"line-number"},[t._v("50")]),n("br"),n("span",{staticClass:"line-number"},[t._v("51")]),n("br"),n("span",{staticClass:"line-number"},[t._v("52")]),n("br"),n("span",{staticClass:"line-number"},[t._v("53")]),n("br")])]),n("h3",{attrs:{id:"hexdump"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hexdump","aria-hidden":"true"}},[t._v("#")]),t._v(" hexdump")]),t._v(" "),n("p",[t._v("Double 类型使用64bits（8个bytes）来存储")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("float is represented in 32 bits, with 1 sign bit, 8 bits of exponent, and 23 bits of the significand (or what follows from a scientific-notation number: 2.33728*1012; 33728 is the significand).")])]),t._v(" "),n("li",[n("p",[t._v("double is represented in 64 bits, with 1 sign bit, 11 bits of exponent, and 52 bits of significand")])])]),t._v(" "),n("div",{staticClass:"language-hex line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("00000000: 40 F2 4F 80 00 00 00 00\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("h3",{attrs:{id:"转换的方法："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#转换的方法：","aria-hidden":"true"}},[t._v("#")]),t._v(" 转换的方法：")]),t._v(" "),n("p",[t._v("double和float使用IEEE754标准记录")]),t._v(" "),n("ul",[n("li",[t._v("整数部分为75000，转成二进制为10010010011111000，用指数表示1.0010010011111000 x 2^16")]),t._v(" "),n("li",[t._v("double类型的偏移码是1023，所以1023+16=1039 转成二进制 10000001111")]),t._v(" "),n("li",[t._v("符号位为：0")]),t._v(" "),n("li",[t._v("尾数为：0010010011111000000000000000000000000000000000000000\n最终")])]),t._v(" "),n("p",[t._v("为：0100000011110010010011111000000000000000000000000000000000000000")]),t._v(" "),n("p",[t._v("16进制表示就是：40F24F8000000000")]),t._v(" "),n("h3",{attrs:{id:"在线转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在线转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 在线转换")]),t._v(" "),n("p",[t._v("https://gregstoll.com/~gregstoll/floattohex/\nhttps://www.h-schmidt.net/FloatConverter/IEEE754.html")]),t._v(" "),n("h3",{attrs:{id:"ieee754"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ieee754","aria-hidden":"true"}},[t._v("#")]),t._v(" IEEE754")]),t._v(" "),n("p",[t._v("IEEE754标准包含一组实数的二进制表示法。它有三部分组成：")]),t._v(" "),n("ul",[n("li",[t._v("符号位")]),t._v(" "),n("li",[t._v("指数位")]),t._v(" "),n("li",[t._v("尾数位")])]),t._v(" "),n("p",[t._v("https://www.zhihu.com/question/21711083")]),t._v(" "),n("h2",{attrs:{id:"convert-a-number-from-decimal-to-ieee-754-floating-point-representation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#convert-a-number-from-decimal-to-ieee-754-floating-point-representation","aria-hidden":"true"}},[t._v("#")]),t._v(" Convert-a-Number-from-Decimal-to-IEEE-754-Floating-Point-Representation")]),t._v(" "),n("h3",{attrs:{id:"_1-choose-single-or-double-precision"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-choose-single-or-double-precision","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. Choose single or double precision.")]),t._v(" "),n("p",[t._v("When writing a number in single or double precision, the steps to a successful conversion will be the same for both, the only change occurs when converting the exponent and mantissa.\nFirst we must understand what single precision means. In floating point representation, each number (0 or 1) is considered a “bit”. Therefore single precision has 32 bits total that are divided into 3 different subjects. These subjects consist of a sign (1 bit), an exponent (8 bits), and a mantissa or fraction (23 bits).\nDouble precision, on the other hand, has the same setup and same 3 parts as single precision; the only difference is that it will be larger and more precise number. In this case, the sign will have 1 bit, the exponent will have 11 bits and the mantissa will have 52 bits.\nIn this example will convert the number 85.125 into IEEE 754 single precision.\n"),n("img",{attrs:{src:s(173),alt:"step1.jpeg"}})]),t._v(" "),n("h3",{attrs:{id:"_2-separate-the-whole-and-the-decimal-part-of-the-number"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-separate-the-whole-and-the-decimal-part-of-the-number","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. Separate the whole and the decimal part of the number.")]),t._v(" "),n("p",[t._v("Take the number that you would like to convert, and take apart the number so you have a whole number portion and a decimal number portion. This example will use the number 85.125. You can separate that into whole number 85, and the decimal 0.125.\n"),n("img",{attrs:{src:s(172),alt:"step1.jpeg"}})]),t._v(" "),n("h3",{attrs:{id:"_3-convert-the-whole-number-into-binary"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-convert-the-whole-number-into-binary","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. Convert the whole number into binary.")]),t._v(" "),n("p",[t._v("This would be the 85 from 85.125, which will be 1010101 when converted into binary.\n"),n("img",{attrs:{src:s(171),alt:"step1.jpeg"}})]),t._v(" "),n("h3",{attrs:{id:"_4-convert-the-decimal-portion-into-binary"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-convert-the-decimal-portion-into-binary","aria-hidden":"true"}},[t._v("#")]),t._v(" 4. Convert the decimal portion into binary.")]),t._v(" "),n("p",[t._v("This would be the 0.125 from 85.125, which will be 0.001 when converted into binary.")]),t._v(" "),n("p",[n("img",{attrs:{src:s(170),alt:"step1.jpeg"}})]),t._v(" "),n("h3",{attrs:{id:"_5-combine-the-two-parts-of-the-number-that-have-been-converted-into-binary"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-combine-the-two-parts-of-the-number-that-have-been-converted-into-binary","aria-hidden":"true"}},[t._v("#")]),t._v(" 5. Combine the two parts of the number that have been converted into binary.")]),t._v(" "),n("p",[t._v("For instance, the number 85 in binary is 1010101 and the decimal portion 0.125 in binary is .001. When you combine them using a decimal point, you end up with 1010101.001 as your final answer.\n"),n("img",{attrs:{src:s(169),alt:"step1.jpeg"}})]),t._v(" "),n("h3",{attrs:{id:"_6-convert-the-binary-number-into-base-2-scientific-notation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-convert-the-binary-number-into-base-2-scientific-notation","aria-hidden":"true"}},[t._v("#")]),t._v(" 6. Convert the binary number into base 2 scientific notation.")]),t._v(" "),n("p",[t._v("You can convert the number into base 2 scientific notation by moving the decimal point over to the left until it is to the right of the first bit. These numbers are normalized which means the leading bit will always be 1. As for the exponent, the number of times that you moved the decimal will be your exponent in base 2 scientific notation.[4]\nRemember that moving the decimal to the left will result in a positive exponent while moving the decimal to the right will result in a negative exponent.\nFor our example, you will need to move the decimal 6 times in order to get it to the right of the first bit. The resulting notation will be {\\displaystyle 01.010101001"),n("em",[t._v("2^{6}}01.010101001")]),t._v("2^{6} , this number will be used in future steps.\n"),n("img",{attrs:{src:s(168),alt:"step1.jpeg"}})]),t._v(" "),n("h3",{attrs:{id:"_7-determine-the-sign-of-the-number-and-display-in-binary-format"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-determine-the-sign-of-the-number-and-display-in-binary-format","aria-hidden":"true"}},[t._v("#")]),t._v(" 7. Determine the sign of the number and display in binary format.")]),t._v(" "),n("p",[t._v("You will now determine if your original number is positive or negative. If the number is positive, you will record that bit as 0, and if it is negative, you will record that bit as 1.[5] Since your original number, 85.125, is positive, you will record that bit as 0. This will be the first bit out of the 32 total bits in your IEEE 754 single precision representation.")]),t._v(" "),n("p",[n("img",{attrs:{src:s(167),alt:"step1.jpeg"}})]),t._v(" "),n("h3",{attrs:{id:"_8-get-the-exponent-based-on-precision"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-get-the-exponent-based-on-precision","aria-hidden":"true"}},[t._v("#")]),t._v(" 8.Get the exponent based on precision.")]),t._v(" "),n("p",[t._v("There are set biases for both single and double precision. The exponent bias for single precision is 127, which means we must add the base 2 exponent found previously to it. Thus, the exponent you will use is 127+6 which is 133.\nDouble precision as perceived from the name is more precise and can hold larger numbers. Therefore its exponent bias is 1023. The same steps used for single precision apply here, so the exponent you can use to find double precision is 1029.\n"),n("img",{attrs:{src:s(166),alt:"step1.jpeg"}})]),t._v(" "),n("h3",{attrs:{id:"_9-turn-the-exponent-into-binary"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-turn-the-exponent-into-binary","aria-hidden":"true"}},[t._v("#")]),t._v(" 9. Turn the exponent into binary.")]),t._v(" "),n("p",[t._v("After you determine your final exponent, you will need to convert it into binary so that it could be used in the IEEE 754 conversion. For the example, you can convert the 133 that you found in the last step into 10000101.\n"),n("img",{attrs:{src:s(165),alt:"step1.jpeg"}})]),t._v(" "),n("h3",{attrs:{id:"_10-determine-the-mantissa"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-determine-the-mantissa","aria-hidden":"true"}},[t._v("#")]),t._v(" 10. Determine the mantissa.")]),t._v(" "),n("p",[t._v("The mantissa aspect, or the third part of the IEEE 754 conversion, is the rest of the number after the decimal of the base 2 scientific notation. You will just drop the 1 in the front and copy the decimal portion of the number that is being multiplied by 2. No binary conversion needed! For the example, the mantissa would be 010101001 from {\\displaystyle 01.010101001"),n("em",[t._v("2^{6}}01.010101001")]),t._v("2^{6}.")]),t._v(" "),n("p",[n("img",{attrs:{src:s(164),alt:"step1.jpeg"}})]),t._v(" "),n("h3",{attrs:{id:"_11-compile-3-parts-into-one-final-number"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-compile-3-parts-into-one-final-number","aria-hidden":"true"}},[t._v("#")]),t._v(" 11. Compile 3 parts into one final number.")]),t._v(" "),n("p",[t._v("Finally, you will compile all that we have calculated thus far into your conversion. It will first begin with a 0 or 1 bit that you determined in step 7 based on sign. For the example, you will have a 0 to start it.\nNext up, you will have the exponent section that you determined in step 9. For the example, your exponent will be 10000101.\nNow, you have the mantissa, which is the third and last part of the conversion. You derived this earlier when you took the decimal portion of the base 2 conversion. For the example, the mantissa would be 010101001.\nFinally, you combine these all together. The order should go sign-exponent-mantissa. After you connect those three binary numbers, you then fill out the rest of the mantissa with 0s.\nFor the example the solution is 0 10000101 01010100100000000000000 as 85.125 converted into IEEE 754 format.\n"),n("img",{attrs:{src:s(163),alt:"step1.jpeg"}})])])}],a=s(0),i=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},n,!1,null,null,null);i.options.__file="writetofile.md";e.default=i.exports}}]);